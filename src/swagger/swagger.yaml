openapi: 3.0.0
info:
  version: 'v1'
  title: Account Service
  description: ' This is the RESTful API documentation of the API Gateway responsible for delivering features to the OCARIoT clients by integrating the OCARIoT services.'

servers:
  - description: Account Local Instance
    url: http://127.0.0.1:5000/api/v1
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/nutes.ocariot/account-service/v1
    
tags:
  - name: users
    description: Operations for the User resource.
    
paths:
  /users:
    post:
      tags:
        - users
      summary: Register a user on the platform.
      description: Register a new user on the platform.
      operationId: addUser
      responses:
        '201':
          description: User successfully registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: >-
            Request can not be met, syntactically incorrect or violates the
            schema. Normally it occurs due to validation issues, such as fields
            that are expected in the request body and not passed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication failed due to invalid authentication credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: User does not have permission to register activities.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: >-
            Specified resource does not exist. Usually when the URI is incorrect
            or the resource is not found, or even no longer exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: >-
            The server is not implementing the media type requested by the
            client for the application response. Only application/json is
            currently accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '415':
          description: >-
            The server does not support the requested payload format. Only
            application / json is accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: The rate limit for requests exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            An internal server error occurred. Although the client appears to
            provide a correct request, the server encountered an unexpected
            condition that prevented it from responding to the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name: 
                  type: string
                  example:  br-schoolA-studentB
                password:
                  type: string
                  example: 'lorem123'
                school:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "Unifor"
                    country:
                      type: string
                      example: "BR"
                    city:
                      type: string
                      example: "Fortaleza" 
                    address:
                      type: string
                      example: "Av. Washington Soares, 1321 - Edson Queiroz, Fortaleza - CE, 60811-905"
        description: Data of the user to be saved.
        required: true
  
    get:
      tags:
      - users
      summary: Recover list of users. Useful for users with administrator permissions.
      operationId: getAllUsers
      description: >- 
        Returns list with registered users on the platform. 
        The query supports field selection, pagination, sorting, and filtering.
      parameters:
      - $ref: '#/components/parameters/fieldsParam'
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Successful requisition.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Authentication failed due to invalid authentication credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: User does not have permission to get activities.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: >-
            Specified resource does not exist. Usually when the URI is incorrect
            or the resource is not found, or even no longer exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: >-
            The server is not implementing the media type requested by the
            client for the application response. Only application/json is
            currently accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: The rate limit for requests exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            An internal server error occurred. Although the client appears to
            provide a correct request, the server encountered an unexpected
            condition that prevented it from responding to the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{user_id}:
    get:
      tags:
      - users
      summary: Recover user data.
      operationId: getUserById
      description: Retrieve the data of the user registered in the platform according to his id.
      parameters:
      - in: path
        name: user_id
        required: true
        description: Id of user.
        example: 5a62be07d6f33400146c9b61
        schema:
          type: string      
      - $ref: '#/components/parameters/fieldsParam'
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Successful requisition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Authentication failed due to invalid authentication credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: The user does not have permission to access the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: >-
            Specified resource does not exist. Usually when the URI is incorrect
            or the resource is not found, or even no longer exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: >-
            The server is not implementing the media type requested by the
            client for the application response. Only application/json is
            currently accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: The rate limit for requests exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            An internal server error occurred. Although the client appears to
            provide a correct request, the server encountered an unexpected
            condition that prevented it from responding to the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/auth:
    post:
      tags:
      - users
      summary: Authenticate user on platform.
      operationId: auth
      description: |
        Retrieve a valid token to be used in requests. 
        The authentication approach is following the specifications of JWT, 
        which is a standard _[(RFC-7519)](https://tools.ietf.org/html/rfc7519)_ that defines how to transmit and store
        JSON objects in a compact and secure way between different applications.
        
        The token payload will include the following information _[(RFC-7519)](https://tools.ietf.org/html/rfc7519#page-8)_:
        - **sub** (subject) - Entity to which the token belongs, usually the user ID;
        - **iss** (issuer) - defines the issuer of the token;
        - **exp** (expiration) - Timestamp in seconds of when the token will expire;
        - **iat** (issued on) - Timestamp in seconds from when the token was created;
        - **escope** - Specifies the access scopes that the generated token has.
        
        Example of values that can make up the payload:
        ```javascript
        {
          "exp": 1543142660,
          "scope": "activities:read activities:register:remove",
          "sub": "USER_ID",
          "iss": "ocariot",
          "iat": 1543200269
        }
      responses:
        '201':
          description: User successfully authenticated.
          content:
            application/json:
              example:
                access_token: eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NDMxNDI2NjAsInNjb3BlIjoiYWN0aXZpdGllczpyZWFkIGFjdGl2aXRpZXM6cmVnaXN0ZXI6cmVtb3ZlIiwic3ViIjoiVVNFUl9JRCIsImlzcyI6Im9jYXJpb3QiLCJpYXQiOjE1NDMyMDAyNjl9.Dj3nRRRtQIBRhb6UMNVNTnePI2s3JfCltU0dtR499IM
                      
        '400':
          description: >-
            Request can not be met, syntactically incorrect or violates the 
            schema. Normally it occurs due to validation issues, such as 
            fields that are expected in the request body and not passed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication failed due to invalid authentication credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >-
            User password must be changed. It occours when the system requires that user change your password during the auth proccess.
          
          content:
            application/json:
              schema:
                example:
                  code: 403
                  message: Change password is necessary. 
                  description: "To ensure information security, the user must change the access password. Access /api/v1/users/{user_id}/password to update then."
                  redirect_link: /api/v1/users/{user_id}/password
        '404':
          description: >-
            Specified resource does not exist. Usually when the URI is incorrect
            or the resource is not found, or even no longer exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: >-
            The server is not implementing the media type requested by the client
            for the application response. Only application/json is currently 
            accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '415':
          description: >-
           The server does not support the requested payload format. Only 
           application/json is accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: The rate limit for requests exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            An internal server error occurred. Although the client appears to
            provide a correct request, the server encountered an unexpected
            condition that prevented it from responding to the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              example:
                user_name: br-schoolA-studentB
                password: lorem123
        description: Data of the user to perform authentication.
        required: true    

components:
  parameters:
    fieldsParam:
      in: query
      name: fields
      required: false
      description: >-
        Allows you to retrieve only the information you want. To do this,
        simply provide the name of the attributes separated by commas.
        For example: **_fields=field1,field2_** indicates that only
        field1 and field2 should be listed in the query result.
      schema:
        type: array
        items:
          type: string
    pageParam:
      in: query
      name: page
      required: false
      description: The page number.
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 1
    limitParam:
      in: query
      name: limit
      required: false
      description: The number of items to return.
      schema:
        type: integer
        format: int32
        maximum: 100
        default: 20
    sortParam:
      in: query
      name: sort
      required: false
      description: >-
        Contains the names of the attributes, separated by commas, that
        will be used to sort the result of the query. For ascending sort,
        use the '+' character before the attribute name. For descending
        sort, use the '-' character before the attribute name. By default,
        the order is ascending, so the '+' symbol is optional, just enter
        the attribute.
      schema:
        type: array
        items:
          type: string
          
    filterParam:
      in: query
      name: ''
      required: false
      description: >-
        To filter a collection by multiple concurrent attributes or filter
        multiple values for an attribute, simply use the attribute/property
        name with an equal sign and the expected values, separated by a comma.
        **_property=value1,value2,value3_**. The query is not case sensitive.
        Example: **_?name=elvis,john_** to retrieve exactly the same users with
        elvis or john name.
        For filtering with logical operators, just follow the syntax:
        **_property=operator:value_**. The available operators are:
         - **gt** -> Defines which value of the attribute is greater than
                    (that is,>) the specified value.
         - **gte** -> Defines which attribute value is greater than or equal to
                    (that is,>=) the specified value.
         - **lt** -> Define the value of the attribute to be less than (that is, <)
                    the specified value.
         - **lte** -> Defines which value of the attribute is less than or equal to
                    (that is, <=) the specified value.

        Example: **_?field1=gte:80&age=lt:100_** to recover the users with age
        is greater than or equal to 80 and less then 100.
      schema:
        type: string
    dateStartParam:
      in: query
      name: date_start
      required: false
      description: >-
        Define start date in format: YYYY-MM-DD ou YYYY-MM-DD hh:mm:ss. The
        attribute used for the query will be the registration_date.
      schema:
        type: string
    dateEndParam:
      in: query
      name: date_end
      required: false
      description: >-
        Define end date in format: YYYY-MM-DD ou YYYY-MM-DD hh:mm:ss.The
        attribute used for the query will be the registration_date.
      schema:
        type: string
        default: today
    periodParam:
      in: query
      name: period
      required: false
      description: |-
        Sets the period from the available ones:
         - **[1..n]d** - Total days (1d, 2d, ...)
         - **[1..n]w** - Total of weeks (1w, 2w, ...)
         - **[1..n]m** - Total of months (1m, 2m, ...)
         - **[1..n]y** - Total of years (1y, 2y, ...)

        The attribute used for the query will be the registration_date.
      schema:
        type: string
  # Reosurces 
  schemas:
    User:
      type: object
      required:
        - user_name
        - school
      properties:
        id:
          type: string
          format: uuid
          description: Automatically generated key field.
          example: 5a62be07d6f33400146c9b61
          readOnly: true
        user_name:
          type: string
          description: Username used for authentication.
          example: br-schoolA-studentB
        school:
          type: object
          properties:
            name:
              type: string
              example: "Unifor"
            country:
              type: string
              example: "BR"
            city:
              type: string
              example: "Fortaleza" 
            address:
              type: string
              example: "Av. Washington Soares, 1321 - Edson Queiroz, Fortaleza - CE, 60811-905"
        create_at:
          type: string
          format: date-time
          description: Date and time the resource was created on the server in the UTC standard, according to ISO 8601.
          readOnly: true  

    MultiStatus:
      type: object
      description: Default template for message when a request returns multiple status.
      required:
        - success
        - error
      properties:
        success:
          type: array
          description: All items that were processed successfully.
          items:
            type: object
            description: Item data processed.
            properties:
              code:
                type: integer
                description: The requisition status code for the item.
                example: 201
              item:
                type: object
                description: Item data that was successfully processed.
        error:
          type: array
          description: All items that were were not processed due to some error.
          items:
            type: object
            description: Item data not processed.
            properties:
              code:
                type: integer
                description: The requisition status code for the item.
                example: 400
              message:
                type: string
                description: Readable and short description of the error.
              description:
                type: string
                description: Detailed description of the error.
              item:
                type: object
                description: Item data that was not successfully processed
                
    Error:
      type: object
      description: >-
        Default template for error message. 
        All returned errors will follow this template.
      required:
      - code
      - message
      - description
      properties:
        code:
          type: integer
          description: >-
            Unique API code that indicates specific details of the error, or
            the actual status code of the response when the unique code is not
            appropriate.
        message:
          type: string
          description: Readable and short description of the error.
        description:
          type: string
          description: Detailed description of the error.